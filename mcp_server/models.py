# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:40:55+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, EmailStr, Field, RootModel, constr


class Status(Enum):
    active = 'active'
    inactive = 'inactive'
    archived = 'archived'
    gdpr_erasure_request = 'gdpr-erasure-request'
    unknown = 'unknown'


class AccountingEventType(Enum):
    field_ = '*'
    accounting_customer_created = 'accounting.customer.created'
    accounting_customer_updated = 'accounting.customer.updated'
    accounting_customer_deleted = 'accounting.customer.deleted'
    accounting_invoice_created = 'accounting.invoice.created'
    accounting_invoice_updated = 'accounting.invoice.updated'
    accounting_invoice_deleted = 'accounting.invoice.deleted'
    accounting_invoice_item_created = 'accounting.invoice_item.created'
    accounting_invoice_item_updated = 'accounting.invoice_item.updated'
    accounting_invoice_item_deleted = 'accounting.invoice_item.deleted'
    accounting_ledger_account_created = 'accounting.ledger_account.created'
    accounting_ledger_account_updated = 'accounting.ledger_account.updated'
    accounting_ledger_account_deleted = 'accounting.ledger_account.deleted'
    accounting_tax_rate_created = 'accounting.tax_rate.created'
    accounting_tax_rate_updated = 'accounting.tax_rate.updated'
    accounting_tax_rate_deleted = 'accounting.tax_rate.deleted'
    accounting_bill_created = 'accounting.bill.created'
    accounting_bill_updated = 'accounting.bill.updated'
    accounting_bill_deleted = 'accounting.bill.deleted'
    accounting_payment_created = 'accounting.payment.created'
    accounting_payment_updated = 'accounting.payment.updated'
    accounting_payment_deleted = 'accounting.payment.deleted'
    accounting_supplier_created = 'accounting.supplier.created'
    accounting_supplier_updated = 'accounting.supplier.updated'
    accounting_supplier_deleted = 'accounting.supplier.deleted'


class AccountingWebhookEvent(BaseModel):
    entity_id: Optional[str] = Field(
        None,
        description="The service provider's ID of the entity that triggered this event",
        examples=['123456ASDF'],
    )
    entity_type: Optional[str] = Field(
        None,
        description='The type entity that triggered this event',
        examples=['Company'],
    )
    entity_url: Optional[str] = Field(
        None,
        description='The url to retrieve entity detail.',
        examples=['https://unify.apideck.com/crm/contacts/123456'],
    )
    event_id: Optional[str] = Field(
        None,
        description='Unique reference to this request event',
        examples=['9755c355-56c3-4a2f-a2da-86ff4411fccb'],
    )
    execution_attempt: Optional[float] = Field(
        None,
        description='The current count this request event has been attempted',
        examples=[2],
    )
    occurred_at: Optional[str] = Field(
        None,
        description='ISO Datetime for when the original event occurred',
        examples=['2021-10-01T03:14:55.419Z'],
    )
    service_id: Optional[str] = Field(
        None, description='Service provider identifier', examples=['close']
    )
    event_type: Optional[AccountingEventType] = None


class Active(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(None, examples=[True], title='Is active')


class Type(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    office = 'office'
    shipping = 'shipping'
    billing = 'billing'
    other = 'other'


class BadRequestResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestvalidationerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestValidationError'],
    )


class BalanceSheetFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    end_date: Optional[str] = Field(
        None,
        description='Filter by end date. If end date is given, start date is required.',
        examples=['2021-12-31'],
        title='End date',
    )
    start_date: Optional[str] = Field(
        None,
        description='Filter by start date. If start date is given, end date is required.',
        examples=['2021-01-01'],
        title='Start date',
    )


class AccountType(Enum):
    bank_account = 'bank_account'
    credit_card = 'credit_card'
    other = 'other'


class Status1(Enum):
    draft = 'draft'
    submitted = 'submitted'
    authorised = 'authorised'
    partially_paid = 'partially_paid'
    paid = 'paid'
    void = 'void'
    credit = 'credit'
    deleted = 'deleted'


class Type1(Enum):
    expense_item = 'expense_item'
    expense_account = 'expense_account'


class By(Enum):
    updated_at = 'updated_at'


class RowType(BaseModel):
    id: Optional[str] = Field(None, examples=['12345'])
    name: Optional[str] = Field(None, examples=['Customer Account'])


class FiscalYearStartMonth(Enum):
    January = 'January'
    February = 'February'
    March = 'March'
    April = 'April'
    May = 'May'
    June = 'June'
    July = 'July'
    August = 'August'
    September = 'September'
    October = 'October'
    November = 'November'
    December = 'December'


class Status2(Enum):
    active = 'active'
    inactive = 'inactive'


class CompanyName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The name of the company.',
        examples=['SpaceX'],
        title='Company name',
    )


class Gender(Enum):
    male = 'male'
    female = 'female'
    unisex = 'unisex'


class Type2(Enum):
    customer = 'customer'
    supplier = 'supplier'
    employee = 'employee'
    personal = 'personal'


class CreatedAt(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The date and time when the object was created.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Created at (timestamp)',
    )


class CreatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who created the object.',
        examples=['12345'],
        title='Created by',
    )


class Type3(Enum):
    invoice = 'invoice'
    order = 'order'
    expense = 'expense'
    credit_memo = 'credit_memo'
    over_payment = 'over_payment'
    pre_payment = 'pre_payment'


class Allocation(BaseModel):
    amount: Optional[float] = Field(
        None,
        description='Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.',
        examples=[49.99],
        title='Amount',
    )
    code: Optional[str] = Field(None, examples=['N091'])
    id: Optional[str] = Field(
        None,
        description='Unique identifier of entity this payment should be attributed to.',
        examples=['123456'],
        title='Linked entity ID',
    )
    type: Optional[Type3] = Field(
        None,
        description='Type of entity this payment should be attributed to.',
        title='Allocation type',
    )


class Status3(Enum):
    draft = 'draft'
    authorised = 'authorised'
    paid = 'paid'
    voided = 'voided'
    deleted = 'deleted'


class Type4(Enum):
    accounts_receivable_credit = 'accounts_receivable_credit'
    accounts_payable_credit = 'accounts_payable_credit'


class Currency(Enum):
    UNKNOWN_CURRENCY = 'UNKNOWN_CURRENCY'
    AED = 'AED'
    AFN = 'AFN'
    ALL = 'ALL'
    AMD = 'AMD'
    ANG = 'ANG'
    AOA = 'AOA'
    ARS = 'ARS'
    AUD = 'AUD'
    AWG = 'AWG'
    AZN = 'AZN'
    BAM = 'BAM'
    BBD = 'BBD'
    BDT = 'BDT'
    BGN = 'BGN'
    BHD = 'BHD'
    BIF = 'BIF'
    BMD = 'BMD'
    BND = 'BND'
    BOB = 'BOB'
    BOV = 'BOV'
    BRL = 'BRL'
    BSD = 'BSD'
    BTN = 'BTN'
    BWP = 'BWP'
    BYR = 'BYR'
    BZD = 'BZD'
    CAD = 'CAD'
    CDF = 'CDF'
    CHE = 'CHE'
    CHF = 'CHF'
    CHW = 'CHW'
    CLF = 'CLF'
    CLP = 'CLP'
    CNY = 'CNY'
    COP = 'COP'
    COU = 'COU'
    CRC = 'CRC'
    CUC = 'CUC'
    CUP = 'CUP'
    CVE = 'CVE'
    CZK = 'CZK'
    DJF = 'DJF'
    DKK = 'DKK'
    DOP = 'DOP'
    DZD = 'DZD'
    EGP = 'EGP'
    ERN = 'ERN'
    ETB = 'ETB'
    EUR = 'EUR'
    FJD = 'FJD'
    FKP = 'FKP'
    GBP = 'GBP'
    GEL = 'GEL'
    GHS = 'GHS'
    GIP = 'GIP'
    GMD = 'GMD'
    GNF = 'GNF'
    GTQ = 'GTQ'
    GYD = 'GYD'
    HKD = 'HKD'
    HNL = 'HNL'
    HRK = 'HRK'
    HTG = 'HTG'
    HUF = 'HUF'
    IDR = 'IDR'
    ILS = 'ILS'
    INR = 'INR'
    IQD = 'IQD'
    IRR = 'IRR'
    ISK = 'ISK'
    JMD = 'JMD'
    JOD = 'JOD'
    JPY = 'JPY'
    KES = 'KES'
    KGS = 'KGS'
    KHR = 'KHR'
    KMF = 'KMF'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KYD = 'KYD'
    KZT = 'KZT'
    LAK = 'LAK'
    LBP = 'LBP'
    LKR = 'LKR'
    LRD = 'LRD'
    LSL = 'LSL'
    LTL = 'LTL'
    LVL = 'LVL'
    LYD = 'LYD'
    MAD = 'MAD'
    MDL = 'MDL'
    MGA = 'MGA'
    MKD = 'MKD'
    MMK = 'MMK'
    MNT = 'MNT'
    MOP = 'MOP'
    MRO = 'MRO'
    MUR = 'MUR'
    MVR = 'MVR'
    MWK = 'MWK'
    MXN = 'MXN'
    MXV = 'MXV'
    MYR = 'MYR'
    MZN = 'MZN'
    NAD = 'NAD'
    NGN = 'NGN'
    NIO = 'NIO'
    NOK = 'NOK'
    NPR = 'NPR'
    NZD = 'NZD'
    OMR = 'OMR'
    PAB = 'PAB'
    PEN = 'PEN'
    PGK = 'PGK'
    PHP = 'PHP'
    PKR = 'PKR'
    PLN = 'PLN'
    PYG = 'PYG'
    QAR = 'QAR'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    RWF = 'RWF'
    SAR = 'SAR'
    SBD = 'SBD'
    SCR = 'SCR'
    SDG = 'SDG'
    SEK = 'SEK'
    SGD = 'SGD'
    SHP = 'SHP'
    SLL = 'SLL'
    SOS = 'SOS'
    SRD = 'SRD'
    SSP = 'SSP'
    STD = 'STD'
    SVC = 'SVC'
    SYP = 'SYP'
    SZL = 'SZL'
    THB = 'THB'
    TJS = 'TJS'
    TMT = 'TMT'
    TND = 'TND'
    TOP = 'TOP'
    TRC = 'TRC'
    TRY = 'TRY'
    TTD = 'TTD'
    TWD = 'TWD'
    TZS = 'TZS'
    UAH = 'UAH'
    UGX = 'UGX'
    USD = 'USD'
    USN = 'USN'
    USS = 'USS'
    UYI = 'UYI'
    UYU = 'UYU'
    UZS = 'UZS'
    VEF = 'VEF'
    VND = 'VND'
    VUV = 'VUV'
    WST = 'WST'
    XAF = 'XAF'
    XAG = 'XAG'
    XAU = 'XAU'
    XBA = 'XBA'
    XBB = 'XBB'
    XBC = 'XBC'
    XBD = 'XBD'
    XCD = 'XCD'
    XDR = 'XDR'
    XOF = 'XOF'
    XPD = 'XPD'
    XPF = 'XPF'
    XPT = 'XPT'
    XTS = 'XTS'
    XXX = 'XXX'
    YER = 'YER'
    ZAR = 'ZAR'
    ZMK = 'ZMK'
    ZMW = 'ZMW'
    BTC = 'BTC'
    ETH = 'ETH'


class CurrencyRate(RootModel[Optional[float]]):
    root: Optional[float] = Field(
        None,
        description='Currency Exchange Rate at the time entity was recorded/generated.',
        examples=[0.69],
        title='Currency Exchange Rate',
    )


class CustomField(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        None,
        description='More information about the custom field',
        examples=['Employee Level'],
        title='Description',
    )
    id: str = Field(..., examples=['2389328923893298'], title='ID')
    name: Optional[str] = Field(
        None,
        description='Name of the custom field.',
        examples=['employee_level'],
        title='Name',
    )
    value: Optional[Union[str, float, bool, List[str]]] = None


class CustomersFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    company_name: Optional[str] = Field(
        None,
        description='Company Name of customer to search for',
        examples=['SpaceX'],
        title='Company Name',
    )
    display_name: Optional[str] = Field(
        None,
        description='Display Name of customer to search for',
        examples=['Techno King'],
        title='Display Name',
    )
    email: Optional[str] = Field(
        None,
        description='Email of customer to search for',
        examples=['elon@spacex.com'],
        title='Email',
    )
    first_name: Optional[str] = Field(
        None,
        description='First name of customer to search for',
        examples=['Elon'],
        title='First Name',
    )
    last_name: Optional[str] = Field(
        None,
        description='Last name of customer to search for',
        examples=['Musk'],
        title='Last Name',
    )


class DownstreamId(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The third-party API ID of original entity',
        examples=['12345'],
    )


class Type5(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    billing = 'billing'
    other = 'other'


class Email(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: EmailStr = Field(..., examples=['elon@musk.com'])
    id: Optional[str] = Field(None, examples=['123'])
    type: Optional[Type5] = Field(None, examples=['primary'])


class FirstName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The first name of the person.',
        examples=['Elon'],
        title='First name',
    )


class Id(RootModel[str]):
    root: str = Field(
        ...,
        description='A unique identifier for an object.',
        examples=['12345'],
        title='ID',
    )


class Status4(Enum):
    draft = 'draft'
    submitted = 'submitted'
    authorised = 'authorised'
    partially_paid = 'partially_paid'
    paid = 'paid'
    void = 'void'
    credit = 'credit'
    deleted = 'deleted'


class Type6(Enum):
    standard = 'standard'
    credit = 'credit'
    service = 'service'
    product = 'product'
    supplier = 'supplier'
    other = 'other'


class Type7(Enum):
    inventory = 'inventory'
    service = 'service'
    other = 'other'


class InvoiceItemsFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(
        None,
        description='Name of Invoice Items to search for',
        examples=['Widgets Large'],
        title='Name',
    )


class Type8(Enum):
    sales_item = 'sales_item'
    discount = 'discount'
    info = 'info'
    sub_total = 'sub_total'


class InvoiceResponse(BaseModel):
    downstream_id: Optional[DownstreamId] = None
    id: Optional[Id] = None


class Type9(Enum):
    debit = 'debit'
    credit = 'credit'


class Language(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='language code according to ISO 639-1. For the United States - EN',
        examples=['EN'],
    )


class LastName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The last name of the person.',
        examples=['Musk'],
        title='Last name',
    )


class Category(BaseModel):
    id: Optional[str] = Field(None, examples=['12345'])
    name: Optional[str] = Field(
        None,
        description='The name of the category.',
        examples=['Finance Charges Expense'],
        title='Category name',
    )


class Classification(Enum):
    asset = 'asset'
    equity = 'equity'
    expense = 'expense'
    liability = 'liability'
    revenue = 'revenue'
    income = 'income'
    other_income = 'other_income'
    other_expense = 'other_expense'
    costs_of_sales = 'costs_of_sales'


class ParentAccount(BaseModel):
    display_id: Optional[str] = Field(
        None,
        description='The human readable display ID used when displaying the parent account',
        examples=['1-1100'],
        title='Display ID',
    )
    id: Optional[str] = Field(
        None,
        description='The ID of the parent account.',
        examples=['12345'],
        title='Parent account ID',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the parent account.',
        examples=['Bank Accounts'],
        title='Name',
    )


class Status5(Enum):
    active = 'active'
    inactive = 'inactive'
    archived = 'archived'


class SubAccount(BaseModel):
    account_sub_name: Optional[str] = Field(
        None,
        description='The name of the sub account.',
        examples=['Petty Cash'],
        title='Sub Account Name',
    )
    id: Optional[str] = Field(
        None,
        description='The ID of the sub account.',
        examples=['12345'],
        title='Sub account ID',
    )


class Type10(Enum):
    accounts_receivable = 'accounts_receivable'
    revenue = 'revenue'
    sales = 'sales'
    other_income = 'other_income'
    bank = 'bank'
    current_asset = 'current_asset'
    fixed_asset = 'fixed_asset'
    non_current_asset = 'non_current_asset'
    other_asset = 'other_asset'
    balancesheet = 'balancesheet'
    equity = 'equity'
    expense = 'expense'
    other_expense = 'other_expense'
    costs_of_sales = 'costs_of_sales'
    accounts_payable = 'accounts_payable'
    credit_card = 'credit_card'
    current_liability = 'current_liability'
    non_current_liability = 'non_current_liability'
    other_liability = 'other_liability'


class LinkedCustomer(BaseModel):
    company_name: Optional[str] = Field(
        None,
        description='The company name of the customer.',
        examples=['The boring company'],
        title='Company Name',
    )
    display_id: Optional[str] = Field(
        None,
        description='The display ID of the customer.',
        examples=['CUST00101'],
        title='Display ID',
    )
    display_name: Optional[str] = Field(
        None,
        description='The display name of the customer.',
        examples=['Windsurf Shop'],
        title='Display Name',
    )
    id: str = Field(
        ...,
        description='The ID of the customer this entity is linked to.',
        examples=['12345'],
        title='Customer ID',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the customer. Deprecated, use display_name instead.',
        examples=['Windsurf Shop'],
        title='Name',
    )


class LinkedInvoiceItem(BaseModel):
    code: Optional[str] = Field(
        None,
        description='User defined item code',
        examples=['120-C'],
        title='Item code',
    )
    id: Optional[str] = Field(
        None,
        description='ID of the linked item. A reference to the [invoice item](https://developers.apideck.com/apis/accounting/reference#tag/Invoice-Items) that was used to create this line item',
        examples=['12344'],
        title='Item ID',
    )
    name: Optional[str] = Field(
        None,
        description='User defined item name',
        examples=['Model Y'],
        title='Item name',
    )


class LinkedLedgerAccount(BaseModel):
    code: Optional[str] = Field(
        None,
        description='The code assigned to the account.',
        examples=['453'],
        title='Code',
    )
    id: Optional[str] = Field(
        None,
        description='The unique identifier for the account.',
        examples=['123456'],
        title='Account ID',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the account.',
        examples=['Bank account'],
        title='Account Name',
    )
    nominal_code: Optional[str] = Field(
        None,
        description='The nominal code of the account.',
        examples=['N091'],
        title='Nominal Code',
    )


class LinkedParentCustomer(BaseModel):
    id: str = Field(
        ...,
        description='The parent ID of the customer this entity is linked to.',
        examples=['12345'],
        title='Customer ID',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the parent customer.',
        examples=['Windsurf Shop'],
        title='Name',
    )


class LinkedTaxRate(BaseModel):
    code: Optional[str] = Field(
        None, description='Tax rate code', examples=['N-T'], title='Tax rate code'
    )
    id: Optional[str] = Field(
        None,
        description='The ID of the object.',
        examples=['123456'],
        title='The ID of the object.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the tax rate',
        examples=['GST on Purchases'],
        title='Name',
    )
    rate: Optional[float] = Field(
        None, description='Rate of the tax rate', examples=[10], title='Rate'
    )


class LinkedTrackingCategory(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The unique identifier for the tracking category.',
        examples=['123456'],
        title='Tracking Category ID',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the tracking category.',
        examples=['New York'],
        title='Tracking Category Name',
    )


class Links(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Link to navigate to the current page through the API',
        examples=['https://unify.apideck.com/crm/companies'],
    )
    next: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
        ],
    )
    previous: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
        ],
    )


class Cursors(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Cursor to navigate to the current page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjI='],
    )
    next: Optional[str] = Field(
        None,
        description='Cursor to navigate to the next page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjM='],
    )
    previous: Optional[str] = Field(
        None,
        description='Cursor to navigate to the previous page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjE='],
    )


class Meta(BaseModel):
    cursors: Optional[Cursors] = Field(
        None,
        description='Cursors to navigate to previous or next pages through the API',
    )
    items_on_page: Optional[int] = Field(
        None,
        description='Number of items returned in the data property of the response',
        examples=[50],
    )


class MiddleName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='Middle name of the person.',
        examples=['D.'],
        title='Middle name',
    )


class NotFoundResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Found'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unknown Widget'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#entitynotfounderror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[404]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['EntityNotFoundError']
    )


class NotImplementedResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Implemented'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unmapped Attribute'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#mappingerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[501]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['MappingError']
    )


class PassThroughQuery(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    example_downstream_property: Optional[str] = Field(
        None,
        description='All passthrough query parameters are passed along to the connector as is (?pass_through[search]=leads becomes ?search=leads)',
    )


class Type11(Enum):
    invoice = 'invoice'
    order = 'order'
    expense = 'expense'
    credit_memo = 'credit_memo'
    over_payment = 'over_payment'
    pre_payment = 'pre_payment'


class Allocation1(BaseModel):
    amount: Optional[float] = Field(
        None,
        description='Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.',
        examples=[49.99],
        title='Amount',
    )
    code: Optional[str] = Field(None, examples=['N091'])
    id: Optional[str] = Field(
        None,
        description='Unique identifier of entity this payment should be attributed to.',
        examples=['123456'],
        title='Linked entity ID',
    )
    type: Optional[Type11] = Field(
        None,
        description='Type of entity this payment should be attributed to.',
        title='Allocation type',
    )


class Status6(Enum):
    authorised = 'authorised'
    paid = 'paid'
    voided = 'voided'
    deleted = 'deleted'


class Type12(Enum):
    accounts_receivable = 'accounts_receivable'
    accounts_payable = 'accounts_payable'
    accounts_receivable_credit = 'accounts_receivable_credit'
    accounts_payable_credit = 'accounts_payable_credit'
    accounts_receivable_overpayment = 'accounts_receivable_overpayment'
    accounts_payable_overpayment = 'accounts_payable_overpayment'
    accounts_receivable_prepayment = 'accounts_receivable_prepayment'
    accounts_payable_prepayment = 'accounts_payable_prepayment'


class PaymentRequiredResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=['You have reached your limit of 2000'],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Payment Required'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Request Limit Reached'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestlimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[402]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['RequestLimitError']
    )


class Type13(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    work = 'work'
    office = 'office'
    mobile = 'mobile'
    assistant = 'assistant'
    fax = 'fax'
    direct_dial_in = 'direct-dial-in'
    personal = 'personal'
    other = 'other'


class PhoneNumber(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    area_code: Optional[str] = Field(None, examples=['323'], title='Area code')
    country_code: Optional[str] = Field(None, examples=['1'], title='Country code')
    extension: Optional[str] = Field(None, examples=['105'], title='Phone extension')
    id: Optional[str] = Field(None, examples=['12345'])
    number: constr(min_length=1) = Field(
        ..., examples=['111-111-1111'], title='Phone number'
    )
    type: Optional[Type13] = Field(None, examples=['primary'])


class ProfitAndLossFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    customer_id: Optional[str] = Field(
        None,
        description='Filter by customer id',
        examples=['123abc'],
        title='Customer Id',
    )
    end_date: Optional[str] = Field(
        None,
        description='Filter by end date. If end date is given, start date is required.',
        examples=['2021-12-31'],
        title='End date',
    )
    start_date: Optional[str] = Field(
        None,
        description='Filter by start date. If start date is given, end date is required.',
        examples=['2021-01-01'],
        title='Start date',
    )


class ProfitAndLossRecord(BaseModel):
    id: Optional[str] = Field(None, examples=['123abc'])
    title: Optional[str] = Field(None, examples=['Income'])
    type: str = Field(..., examples=['Record'])
    value: Optional[float] = Field(None, examples=[23992.34])


class Quantity(RootModel[Optional[float]]):
    root: Optional[float] = Field(None, examples=[1], title='Quantity')


class RowVersion(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.',
        examples=['1-12345'],
        title='Row version',
    )


class SalesTaxNumber(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None, examples=['111.222.333'], title='Sales Tax Number'
    )


class SocialLink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[str] = Field(None, examples=['twitter'])
    url: constr(min_length=1) = Field(
        ..., examples=['https://www.twitter.com/apideck-io']
    )


class SortDirection(Enum):
    asc = 'asc'
    desc = 'desc'


class Suffix(RootModel[Optional[str]]):
    root: Optional[str] = Field(None, examples=['Jr.'], title='Suffix')


class Status7(Enum):
    active = 'active'
    inactive = 'inactive'
    archived = 'archived'
    gdpr_erasure_request = 'gdpr-erasure-request'
    unknown = 'unknown'


class SuppliersFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    company_name: Optional[str] = Field(
        None,
        description='Company Name of supplier to search for',
        examples=['SpaceX'],
        title='Company Name',
    )
    email: Optional[str] = Field(
        None,
        description='Email of supplier to search for',
        examples=['elon@spacex.com'],
        title='Email',
    )


class Tags(RootModel[List[str]]):
    root: List[str] = Field(..., examples=[['New']])


class TaxInclusive(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(
        None,
        description='Amounts are including tax',
        examples=[True],
        title='Tax inclusive',
    )


class TaxNumber(RootModel[Optional[str]]):
    root: Optional[str] = Field(None, examples=['US123945459'], title='Tax number')


class Component(BaseModel):
    compound: Optional[bool] = Field(None, examples=[True], title='Compound')
    id: Optional[str] = Field(None, examples=['10'], title='TaxRate Id')
    name: Optional[constr(min_length=1)] = Field(None, examples=['GST'])
    rate: Optional[float] = Field(None, examples=[10], title='TaxRate')


class Status8(Enum):
    active = 'active'
    inactive = 'inactive'
    archived = 'archived'


class TaxRatesFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assets: Optional[bool] = Field(
        None,
        description='Boolean to describe if tax rate can be used for asset accounts',
        examples=[True],
        title='Assets',
    )
    equity: Optional[bool] = Field(
        None,
        description='Boolean to describe if tax rate can be used for equity accounts',
        examples=[True],
        title='Equity',
    )
    expenses: Optional[bool] = Field(
        None,
        description='Boolean to describe if tax rate can be used for expense accounts',
        examples=[True],
        title='Expenses',
    )
    liabilities: Optional[bool] = Field(
        None,
        description='Boolean to describe if tax rate can be used for liability accounts',
        examples=[True],
        title='Liabilities',
    )
    revenue: Optional[bool] = Field(
        None,
        description='Boolean to describe if tax rate can be used for revenue accounts',
        examples=[True],
        title='Revenue',
    )


class Title(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The job title of the person.',
        examples=['CEO'],
        title='Job title',
    )


class Detail(BaseModel):
    context: Optional[str] = None
    error: Optional[Dict[str, Any]] = None


class TooManyRequestsResponse(BaseModel):
    detail: Optional[Detail] = None
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)',
        examples=['Too Many Requests'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Connector Rate Limit Error'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#connectorratelimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[429]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['ConnectorRateLimitError'],
    )


class UnauthorizedResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Failed to generate valid JWT Session. Verify applicationId is correct'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unauthorized'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unauthorized Request'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[401]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['UnauthorizedError']
    )


class UnexpectedErrorResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestHeadersValidationError'],
    )


class UnifiedId(BaseModel):
    id: str = Field(
        ...,
        description='The unique identifier of the resource',
        examples=['12345'],
        title='Id',
    )


class UnitOfMeasure(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='Description of the unit type the item is sold as, ie: kg, hour.',
        examples=['pc.'],
        title='Unit of measure',
    )


class UnitPrice(RootModel[Optional[float]]):
    root: Optional[float] = Field(None, examples=[27500.5], title='Unit price')


class UnprocessableResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Unprocessable request, please verify your request headers and body.'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unprocessable Entity'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid State'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#invalidstateerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[422]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['InvalidStateError']
    )


class UpdateBillResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['bills']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateCreditNoteResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['credit-notes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateCustomerResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['customers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateInvoiceItemsResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoice-items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateInvoiceResponse(BaseModel):
    data: InvoiceResponse
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoices']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateJournalEntryResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['journal-entries']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['quickbooks']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateLedgerAccountResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ledger-accounts']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdatePaymentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['payments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateSupplierResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['suppliers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateTaxRateResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['tax-rates']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdatedAt(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        None,
        description='The date and time when the object was last updated.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Updated at (timestamp)',
    )


class UpdatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who last updated the object.',
        examples=['12345'],
        title='Updated by',
    )


class Type14(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    other = 'other'


class Website(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[Type14] = Field(None, examples=['primary'])
    url: constr(min_length=1) = Field(..., examples=['http://example.com'])


class Address(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    city: Optional[str] = Field(
        None, description='Name of city.', examples=['San Francisco']
    )
    contact_name: Optional[str] = Field(None, examples=['Elon Musk'])
    country: Optional[str] = Field(
        None,
        description='country code according to ISO 3166-1 alpha-2.',
        examples=['US'],
    )
    county: Optional[str] = Field(
        None,
        description='Address field that holds a sublocality, such as a county',
        examples=['Santa Clara'],
    )
    email: Optional[str] = Field(None, examples=['elon@musk.com'])
    fax: Optional[str] = Field(None, examples=['122-111-1111'])
    id: Optional[str] = Field(None, examples=['123'])
    latitude: Optional[str] = Field(None, examples=['40.759211'])
    line1: Optional[str] = Field(
        None,
        description='Line 1 of the address e.g. number, street, suite, apt #, etc.',
        examples=['Main street'],
    )
    line2: Optional[str] = Field(
        None, description='Line 2 of the address', examples=['apt #']
    )
    line3: Optional[str] = Field(
        None, description='Line 3 of the address', examples=['Suite #']
    )
    line4: Optional[str] = Field(
        None, description='Line 4 of the address', examples=['delivery instructions']
    )
    longitude: Optional[str] = Field(None, examples=['-73.984638'])
    name: Optional[str] = Field(None, examples=['HQ US'])
    phone_number: Optional[str] = Field(None, examples=['111-111-1111'])
    postal_code: Optional[str] = Field(
        None, description='Zip code or equivalent.', examples=['94104']
    )
    row_version: Optional[RowVersion] = None
    salutation: Optional[str] = Field(None, examples=['Mr'])
    state: Optional[str] = Field(None, description='Name of state', examples=['CA'])
    street_number: Optional[str] = Field(
        None, description='Street number', examples=['25']
    )
    string: Optional[str] = Field(
        None,
        examples=['25 Spring Street, Blackburn, VIC 3130'],
        title="The address string. Some APIs don't provide structured address data.",
    )
    type: Optional[Type] = Field(None, examples=['primary'])
    website: Optional[str] = Field(None, examples=['https://elonmusk.com'])


class Account(BaseModel):
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None,
        description='The name of the current asset account',
        examples=['Accounts Receivable (A/R)'],
        title='Account Name',
    )
    value: Optional[float] = Field(
        None,
        description='The value of the current asset',
        examples=[10000],
        title='Value',
    )


class CurrentAssets(BaseModel):
    accounts: List[Account]
    total: float = Field(
        ...,
        description='Total current assets',
        examples=[100000],
        title='Total Current Assets',
    )


class Account1(BaseModel):
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None,
        description='The name of the fixed asset account',
        examples=['Accounts Receivable (A/R)'],
        title='Account Name',
    )
    value: Optional[float] = Field(
        None,
        description='The value of the fixed asset',
        examples=[10000],
        title='Value',
    )


class FixedAssets(BaseModel):
    accounts: List[Account1]
    total: float = Field(
        ...,
        description='Total fixed assets',
        examples=[100000],
        title='Total Fixed Assets',
    )


class Assets(BaseModel):
    current_assets: CurrentAssets
    fixed_assets: FixedAssets
    total: float = Field(
        ..., description='Total assets', examples=[100000], title='Total Assets'
    )


class Item(BaseModel):
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None,
        description='The type of the equity',
        examples=['Retained Earnings'],
        title='Account Name',
    )
    value: Optional[float] = Field(
        None, description='The equity amount', examples=[10000], title='Value'
    )


class Equity(BaseModel):
    items: List[Item]
    total: float = Field(
        ..., description='Total equity', examples=[100000], title='Total Equity'
    )


class Account2(BaseModel):
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None,
        description='The name of the liability account',
        examples=['Accounts Payable (A/P)'],
        title='Account Name',
    )
    value: Optional[float] = Field(
        None, description='The value of the liability', examples=[10000], title='Value'
    )


class Liabilities(BaseModel):
    accounts: List[Account2]
    total: float = Field(
        ...,
        description='Total liabilities',
        examples=[100000],
        title='Total Liabilities',
    )


class BalanceSheet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assets: Assets = Field(
        ...,
        examples=[
            {
                'current_assets': {
                    'accounts': [
                        {
                            'id': '1',
                            'name': 'Accounts Receivable (A/R)',
                            'value': 10000,
                        },
                        {'id': '2', 'name': 'Accounts Payable (A/P)', 'value': 10000},
                    ],
                    'total': 100000,
                },
                'fixed_assets': {
                    'accounts': [
                        {
                            'id': '1',
                            'name': 'Accounts Receivable (A/R)',
                            'value': 10000,
                        },
                        {'id': '2', 'name': 'Accounts Payable (A/P)', 'value': 10000},
                    ],
                    'total': 100000,
                },
                'total': 200000,
            }
        ],
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    end_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None,
        description='The start date of the report',
        examples=['2017-01-01'],
        title='Start Date',
    )
    equity: Equity = Field(
        ...,
        examples=[
            {
                'items': [{'id': '1', 'name': 'Retained Earnings', 'value': 10000}],
                'total': 200000,
            }
        ],
    )
    id: Optional[Id] = None
    liabilities: Liabilities = Field(
        ...,
        examples=[
            {
                'accounts': [
                    {'id': '1', 'name': 'Accounts Payable (A/P)', 'value': 10000}
                ],
                'total': 200000,
            }
        ],
    )
    report_name: str = Field(
        ...,
        description='The name of the report',
        examples=['BalanceSheet'],
        title='Report Name',
    )
    start_date: constr(pattern=r'^\d{4}-\d{2}-\d{2}$') = Field(
        ...,
        description='The start date of the report',
        examples=['2017-01-01'],
        title='Start Date',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class BankAccount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    account_name: Optional[str] = Field(
        None,
        description='The name which you used in opening your bank account.',
        examples=['SPACEX LLC'],
        title='Bank Account Name',
    )
    account_number: Optional[str] = Field(
        None,
        description='A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.',
        examples=['123465'],
        title='Bank Account Number',
    )
    account_type: Optional[AccountType] = Field(
        None,
        description='The type of bank account.',
        examples=['credit_card'],
        title='Account Type',
    )
    bank_code: Optional[str] = Field(
        None,
        description='A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.',
        examples=['BNH'],
        title='Bank Code',
    )
    bic: Optional[str] = Field(None, examples=['AUDSCHGGXXX'])
    branch_identifier: Optional[str] = Field(
        None,
        description='A branch identifier is a unique identifier for a branch of a bank or financial institution.',
        examples=['001'],
        title='Branch Identifier',
    )
    bsb_number: Optional[str] = Field(
        None,
        description='A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.',
        examples=['062-001'],
        title='BSB Number',
    )
    currency: Optional[Currency] = None
    iban: Optional[str] = Field(None, examples=['CH2989144532982975332'])


class BillLineItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[str] = Field(
        None,
        description='User defined item code',
        examples=['120-C'],
        title='Item code',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    department_id: Optional[str] = Field(
        None, description='Department id', examples=['1234'], title='Department id'
    )
    description: Optional[str] = Field(
        None,
        description='User defined description',
        examples=[
            'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.'
        ],
        title='Description',
    )
    discount_percentage: Optional[float] = Field(
        None,
        description='Discount percentage',
        examples=[0.01],
        title='Discount amount',
    )
    id: Optional[Id] = None
    item: Optional[LinkedInvoiceItem] = None
    ledger_account: Optional[LinkedLedgerAccount] = None
    line_number: Optional[int] = Field(
        None,
        description='Line number in the invoice',
        examples=[1],
        title='Line number',
    )
    location_id: Optional[str] = Field(
        None, description='Location id', examples=['1234'], title='Location id'
    )
    quantity: Optional[Quantity] = None
    row_id: Optional[str] = Field(
        None, description='Row ID', examples=['12345'], title='Row ID'
    )
    row_version: Optional[RowVersion] = None
    tax_amount: Optional[float] = Field(
        None, description='Tax amount', examples=[27500], title='Tax amount'
    )
    tax_rate: Optional[LinkedTaxRate] = None
    total_amount: Optional[float] = Field(
        None,
        description='Total amount of the line item',
        examples=[27500],
        title='Total amount',
    )
    type: Optional[Type1] = Field(
        None,
        description='Bill Line Item type',
        examples=['expense_account'],
        title='Type',
    )
    unit_of_measure: Optional[UnitOfMeasure] = None
    unit_price: Optional[UnitPrice] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class BillsSort(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    by: Optional[By] = Field(
        None,
        description='The field on which to sort the Bills',
        examples=['updated_at'],
    )
    direction: Optional[SortDirection] = 'asc'


class Company(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    abn_branch: Optional[str] = Field(
        None,
        description='An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.',
        examples=['123'],
        title='ABN Branch',
    )
    abn_or_tfn: Optional[str] = Field(
        None,
        description='An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.',
        examples=['46 115 614 695'],
        title='ABN or TFN',
    )
    acn: Optional[str] = Field(
        None,
        description='The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.',
        examples=['XXX XXX XXX'],
        title='ACN',
    )
    addresses: Optional[List[Address]] = None
    annual_revenue: Optional[str] = Field(
        None, description='Annual revenue', examples=['+$35m']
    )
    bank_accounts: Optional[List[BankAccount]] = None
    birthday: Optional[date] = Field(
        None,
        description='The date of birth of the person.',
        examples=['2000-08-12'],
        title='Birth Date',
    )
    created_at: Optional[datetime] = Field(None, examples=['2020-09-30T07:43:32.000Z'])
    created_by: Optional[str] = Field(None, examples=['12345'])
    currency: Optional[Currency] = None
    custom_fields: Optional[List[CustomField]] = None
    deleted: Optional[bool] = Field(None, examples=[False])
    description: Optional[str] = Field(
        None,
        examples=[
            'Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.'
        ],
    )
    emails: Optional[List[Email]] = None
    fax: Optional[str] = Field(None, examples=['+12129876543'])
    first_name: Optional[FirstName] = None
    id: Optional[str] = Field(None, examples=['12345'])
    image: Optional[str] = Field(
        None, examples=['https://www.spacex.com/static/images/share.jpg']
    )
    industry: Optional[str] = Field(None, description='Industry', examples=['Apparel'])
    interaction_count: Optional[int] = Field(None, examples=[1])
    last_activity_at: Optional[datetime] = Field(
        None, examples=['2020-09-30T07:43:32.000Z']
    )
    last_name: Optional[LastName] = None
    name: constr(min_length=1) = Field(..., examples=['SpaceX'])
    number_of_employees: Optional[str] = Field(
        None, description='Number of employees', examples=['500-1000']
    )
    owner_id: Optional[str] = Field(None, examples=['12345'])
    ownership: Optional[str] = Field(None, description='Ownership', examples=['Public'])
    parent_id: Optional[str] = Field(None, description='Parent ID', examples=['22345'])
    payee_number: Optional[str] = Field(
        None, examples=['78932EN'], title='Payee number'
    )
    phone_numbers: Optional[List[PhoneNumber]] = None
    read_only: Optional[bool] = Field(None, examples=[False], title='Read-only')
    row_type: Optional[RowType] = Field(None, title='Company Row Type')
    sales_tax_number: Optional[str] = Field(
        None, examples=['12456EN'], title='Sales tax number'
    )
    salutation: Optional[str] = Field(
        None,
        description="A formal salutation for the person. For example, 'Mr', 'Mrs'",
        examples=['Mr'],
    )
    social_links: Optional[List[SocialLink]] = None
    status: Optional[str] = Field(None, examples=['Open'])
    tags: Optional[Tags] = None
    updated_at: Optional[datetime] = Field(None, examples=['2020-09-30T07:43:32.000Z'])
    updated_by: Optional[str] = Field(None, examples=['12345'])
    vat_number: Optional[str] = Field(
        None, description='VAT number', examples=['BE0689615164']
    )
    websites: Optional[List[Website]] = None


class CompanyInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addresses: Optional[List[Address]] = None
    automated_sales_tax: Optional[bool] = Field(
        None,
        description='Whether sales tax is calculated automatically for the company',
        title='Automated sales tax',
    )
    company_name: Optional[CompanyName] = None
    company_start_date: Optional[date] = Field(
        None,
        description='Date when company file was created',
        examples=['2015-06-05'],
        title='Date when company file was created',
    )
    country: Optional[str] = Field(
        None,
        description='country code according to ISO 3166-1 alpha-2.',
        examples=['US'],
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    default_sales_tax: Optional[LinkedTaxRate] = None
    emails: Optional[List[Email]] = None
    fiscal_year_start_month: Optional[FiscalYearStartMonth] = Field(
        None,
        description='The start month of fiscal year.',
        examples=['January'],
        title='The start month of fiscal year.',
    )
    id: Optional[Id] = None
    language: Optional[Language] = None
    legal_name: Optional[str] = Field(
        None,
        description='The legal name of the company',
        examples=['SpaceX Inc.'],
        title='Legal name',
    )
    phone_numbers: Optional[List[PhoneNumber]] = None
    row_version: Optional[RowVersion] = None
    sales_tax_enabled: Optional[bool] = Field(
        None,
        description='Whether sales tax is enabled for the company',
        title='Sales tax enabled',
    )
    sales_tax_number: Optional[SalesTaxNumber] = None
    status: Optional[Status2] = Field(
        None,
        description='Based on the status some functionality is enabled or disabled.',
        examples=['active'],
        title='Company status',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class Contact(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    active: Optional[bool] = Field(None, examples=[True])
    addresses: Optional[List[Address]] = None
    birthday: Optional[str] = Field(None, examples=['2000-08-12'])
    company_id: Optional[str] = Field(None, examples=['23456'])
    company_name: Optional[str] = Field(None, examples=['23456'])
    created_at: Optional[datetime] = Field(None, examples=['2017-08-12T20:43:21.291Z'])
    current_balance: Optional[float] = Field(
        None, examples=[10.5], title='Current Balance'
    )
    custom_fields: Optional[List[CustomField]] = None
    department: Optional[str] = Field(None, examples=['Engineering'])
    description: Optional[str] = Field(
        None, examples=['Internal champion'], title='Description'
    )
    email_domain: Optional[str] = Field(None, examples=['gmail.com'])
    emails: Optional[List[Email]] = None
    fax: Optional[str] = Field(None, examples=['+12129876543'])
    first_call_at: Optional[datetime] = Field(
        None, examples=['2020-09-30T07:43:32.000Z']
    )
    first_email_at: Optional[datetime] = Field(
        None, examples=['2020-09-30T07:43:32.000Z']
    )
    first_name: Optional[str] = Field(None, examples=['Elon'])
    gender: Optional[Gender] = Field(None, examples=['female'])
    id: Optional[str] = Field(None, examples=['12345'])
    image: Optional[str] = Field(None, examples=['https://unavatar.io/elon-musk'])
    language: Optional[str] = Field(
        None,
        description='language code according to ISO 639-1. For the United States - EN',
        examples=['EN'],
    )
    last_activity_at: Optional[datetime] = Field(
        None, examples=['2020-09-30T07:43:32.000Z']
    )
    last_name: Optional[str] = Field(None, examples=['Musk'])
    lead_id: Optional[str] = Field(None, examples=['34567'])
    lead_source: Optional[str] = Field(None, examples=['Cold Call'])
    middle_name: Optional[str] = Field(None, examples=['D.'])
    name: constr(min_length=1) = Field(..., examples=['Elon Musk'])
    owner_id: Optional[str] = Field(None, examples=['54321'])
    phone_numbers: Optional[List[PhoneNumber]] = None
    photo_url: Optional[str] = Field(
        None,
        description='The URL of the photo of a person.',
        examples=['https://unavatar.io/elon-musk'],
        title='Photo URL',
    )
    prefix: Optional[str] = Field(None, examples=['Mr.'])
    social_links: Optional[List[SocialLink]] = None
    status: Optional[str] = Field(None, examples=['open'])
    suffix: Optional[str] = Field(None, examples=['PhD'])
    tags: Optional[Tags] = None
    title: Optional[str] = Field(None, examples=['CEO'])
    type: Optional[Type2] = Field(None, examples=['personal'])
    updated_at: Optional[datetime] = Field(None, examples=['2017-08-12T20:43:21.291Z'])
    websites: Optional[List[Website]] = None


class CreateBillResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['bills']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateCreditNoteResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['credit-notes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateCustomerResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['customers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateInvoiceItemResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoice-items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateInvoiceResponse(BaseModel):
    data: InvoiceResponse
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoices']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateJournalEntryResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['journal-entries']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['quickbooks']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateLedgerAccountResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ledger-accounts']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreatePaymentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['payments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateSupplierResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['payments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateTaxRateResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['tax-rates']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteBillResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['bills']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteCreditNoteResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['credit-notes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteCustomerResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['customers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteInvoiceResponse(BaseModel):
    data: InvoiceResponse
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoices']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteJournalEntryResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['journal-entries']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['quickbooks']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteLedgerAccountResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ledger-accounts']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeletePaymentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['payments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteSupplierResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['suppliers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteTaxRateResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['tax-rates']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetBalanceSheetResponse(BaseModel):
    data: BalanceSheet
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['BalanceSheets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['quickbooks']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCompanyInfoResponse(BaseModel):
    data: CompanyInfo
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['company-info']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class PurchaseDetails(BaseModel):
    tax_inclusive: Optional[TaxInclusive] = None
    tax_rate: Optional[LinkedTaxRate] = None
    unit_of_measure: Optional[UnitOfMeasure] = None
    unit_price: Optional[UnitPrice] = None


class SalesDetails(BaseModel):
    tax_inclusive: Optional[TaxInclusive] = None
    tax_rate: Optional[LinkedTaxRate] = None
    unit_of_measure: Optional[UnitOfMeasure] = None
    unit_price: Optional[UnitPrice] = None


class InvoiceItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    active: Optional[Active] = None
    asset_account: Optional[LinkedLedgerAccount] = None
    code: Optional[str] = Field(
        None,
        description='User defined item code',
        examples=['120-C'],
        title='Item code',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    description: Optional[str] = Field(
        None,
        description='A short description of the item',
        examples=[
            'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.'
        ],
        title='Description',
    )
    expense_account: Optional[LinkedLedgerAccount] = None
    id: Optional[str] = Field(
        None, description='The ID of the item.', examples=['123456'], title='Item ID'
    )
    income_account: Optional[LinkedLedgerAccount] = None
    inventory_date: Optional[date] = Field(
        None,
        description='The date of opening balance if inventory item is tracked - YYYY-MM-DD.',
        examples=['2020-10-30'],
        title='Inventory date',
    )
    name: Optional[str] = Field(
        None, description='Item name', examples=['Model Y'], title='Item name'
    )
    purchase_details: Optional[PurchaseDetails] = None
    purchased: Optional[bool] = Field(
        None,
        description='Item is available for purchase transactions',
        examples=[True],
        title='Item purchased',
    )
    quantity: Optional[Quantity] = None
    row_version: Optional[RowVersion] = None
    sales_details: Optional[SalesDetails] = None
    sold: Optional[bool] = Field(
        None,
        description='Item will be available on sales transactions',
        examples=[True],
        title='Item sold',
    )
    taxable: Optional[bool] = Field(
        None,
        description='If true, transactions for this item are taxable',
        examples=[True],
        title='Item taxable',
    )
    tracked: Optional[bool] = Field(
        None, description='Item is inventoried', examples=[True], title='Item tracked'
    )
    type: Optional[Type7] = Field(
        None, description='Item type', examples=['inventory'], title='Type'
    )
    unit_price: Optional[UnitPrice] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class InvoiceItemAssetAccount(RootModel[LinkedLedgerAccount]):
    root: LinkedLedgerAccount


class InvoiceItemExpenseAccount(RootModel[LinkedLedgerAccount]):
    root: LinkedLedgerAccount


class InvoiceItemIncomeAccount(RootModel[LinkedLedgerAccount]):
    root: LinkedLedgerAccount


class InvoiceLineItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[str] = Field(
        None,
        description='User defined item code',
        examples=['120-C'],
        title='Item code',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    department_id: Optional[str] = Field(
        None, description='Department id', examples=['1234'], title='Department id'
    )
    description: Optional[str] = Field(
        None,
        description='User defined description',
        examples=[
            'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.'
        ],
        title='Description',
    )
    discount_amount: Optional[float] = Field(
        None,
        description='Discount amount applied to the line item when supported downstream.',
        examples=[19.99],
        title='Discount Amount',
    )
    discount_percentage: Optional[float] = Field(
        None,
        description='Discount percentage applied to the line item when supported downstream.',
        examples=[0.01],
        title='Discount Percentage',
    )
    id: Optional[Id] = None
    item: Optional[LinkedInvoiceItem] = None
    ledger_account: Optional[LinkedLedgerAccount] = None
    line_number: Optional[int] = Field(
        None,
        description='Line number in the invoice',
        examples=[1],
        title='Line number',
    )
    location_id: Optional[str] = Field(
        None, description='Location id', examples=['1234'], title='Location id'
    )
    quantity: Optional[Quantity] = None
    row_id: Optional[str] = Field(
        None, description='Row ID', examples=['12345'], title='Row ID'
    )
    row_version: Optional[RowVersion] = None
    tax_amount: Optional[float] = Field(
        None, description='Tax amount', examples=[27500], title='Tax amount'
    )
    tax_rate: Optional[LinkedTaxRate] = None
    total_amount: Optional[float] = Field(
        None,
        description='Total amount of the line item',
        examples=[27500],
        title='Total amount',
    )
    type: Optional[Type8] = Field(
        None, description='Item type', examples=['sales_item'], title='Type'
    )
    unit_of_measure: Optional[UnitOfMeasure] = None
    unit_price: Optional[UnitPrice] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class InvoicesSort(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    by: Optional[By] = Field(
        None,
        description='The field on which to sort the Invoices',
        examples=['updated_at'],
    )
    direction: Optional[SortDirection] = 'asc'


class JournalEntryLineItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    department_id: Optional[Id] = None
    description: Optional[str] = Field(
        None,
        description='User defined description',
        examples=[
            'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.'
        ],
        title='Description',
    )
    id: Optional[Id] = None
    ledger_account: LinkedLedgerAccount
    location_id: Optional[Id] = None
    tax_amount: Optional[float] = Field(
        None, description='Tax amount', examples=[27500], title='Tax amount'
    )
    tax_rate: Optional[LinkedTaxRate] = None
    total_amount: float = Field(
        ...,
        description='Debit entries are considered positive, and credit entries are considered negative.',
        examples=[27500],
        title='Total amount',
    )
    tracking_category: Optional[LinkedTrackingCategory] = None
    type: Type9 = Field(
        ...,
        description='Debit entries are considered positive, and credit entries are considered negative.',
        examples=['debit'],
        title='Type',
    )


class LedgerAccount(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    active: Optional[bool] = Field(
        None,
        description='Whether the account is active or not.',
        examples=[True],
        title='Is active',
    )
    bank_account: Optional[BankAccount] = None
    categories: Optional[List[Category]] = Field(
        None, description='The categories of the account.', title='Categories'
    )
    classification: Optional[Classification] = Field(
        None,
        description='The classification of account.',
        examples=['asset'],
        title='Classification',
    )
    code: Optional[str] = Field(
        None,
        description='The code assigned to the account.',
        examples=['453'],
        title='Code',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    current_balance: Optional[float] = Field(
        None,
        description='The current balance of the account.',
        examples=[20000],
        title='Current balance',
    )
    description: Optional[str] = Field(
        None,
        description='The description of the account.',
        examples=['Main checking account'],
        title='Description',
    )
    display_id: Optional[str] = Field(
        None,
        description='The human readable display ID used when displaying the account',
        examples=['1-12345'],
        title='Display ID',
    )
    fully_qualified_name: Optional[str] = Field(
        None,
        description='The fully qualified name of the account.',
        examples=['Asset.Bank.Checking_Account'],
        title='Fully Qualified Name',
    )
    header: Optional[bool] = Field(
        None,
        description='Whether the account is a header or not.',
        examples=[True],
        title='Is header',
    )
    id: Optional[Id] = None
    last_reconciliation_date: Optional[date] = Field(
        None,
        description='Reconciliation Date means the last calendar day of each Reconciliation Period.',
        examples=['2020-09-30'],
        title='Last Reconciliation Date',
    )
    level: Optional[float] = Field(None, examples=[1])
    name: Optional[str] = Field(
        None,
        description='The name of the account.',
        examples=['Bank account'],
        title='Name',
    )
    nominal_code: Optional[str] = Field(
        None,
        description='The nominal code of the ledger account.',
        examples=['N091'],
        title='Nominal Code',
    )
    opening_balance: Optional[float] = Field(
        None,
        description='The opening balance of the account.',
        examples=[75000],
        title='Opening balance',
    )
    parent_account: Optional[ParentAccount] = None
    row_version: Optional[RowVersion] = None
    status: Optional[Status5] = Field(
        None,
        description='The status of the account.',
        examples=['active'],
        title='Account status',
    )
    sub_account: Optional[bool] = Field(
        None,
        description='Whether the account is a sub account or not.',
        examples=[False],
        title='Is sub account',
    )
    sub_accounts: Optional[List[SubAccount]] = Field(
        None, description='The sub accounts of the account.', title='Sub accounts'
    )
    sub_type: Optional[str] = Field(
        None,
        description='The sub type of account.',
        examples=['CHECKING_ACCOUNT'],
        title='Sub Type',
    )
    tax_rate: Optional[LinkedTaxRate] = None
    tax_type: Optional[str] = Field(
        None,
        description='The tax type of the account.',
        examples=['NONE'],
        title='Tax Type',
    )
    type: Optional[Type10] = Field(
        None, description='The type of account.', examples=['bank'], title='Type'
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class LedgerAccounts(RootModel[List[LedgerAccount]]):
    root: List[LedgerAccount]


class LinkedSupplier(BaseModel):
    address: Optional[Address] = None
    company_name: Optional[str] = Field(
        None,
        description='The company name of the supplier.',
        examples=['The boring company'],
        title='Company Name',
    )
    display_name: Optional[str] = Field(
        None,
        description='The display name of the supplier.',
        examples=['Windsurf Shop'],
        title='Display Name',
    )
    id: str = Field(
        ...,
        description='The ID of the supplier this entity is linked to.',
        examples=['12345'],
        title='Supplier ID',
    )


class Payment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    account: Optional[LinkedLedgerAccount] = None
    accounts_receivable_account_id: Optional[str] = Field(
        None,
        description='Unique identifier for the account to allocate payment to.',
        examples=['123456'],
        title='Accounts receivable account id',
    )
    accounts_receivable_account_type: Optional[str] = Field(
        None,
        description='Type of accounts receivable account.',
        examples=['Account'],
        title='Type of accounts receivable account',
    )
    allocations: Optional[List[Allocation1]] = None
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    currency_rate: Optional[CurrencyRate] = None
    customer: Optional[LinkedCustomer] = None
    display_id: Optional[str] = Field(
        None,
        description='Payment id to be displayed.',
        examples=['123456'],
        title='Display id',
    )
    downstream_id: Optional[DownstreamId] = None
    id: str = Field(
        ...,
        description='Unique identifier representing the entity',
        examples=['123456'],
        title='Payment identifier',
    )
    note: Optional[str] = Field(
        None,
        description='Optional note to be associated with the payment.',
        examples=['Some notes about this payment'],
        title='Note',
    )
    payment_method: Optional[str] = Field(
        None,
        description='Payment method name',
        examples=['Credit Card'],
        title='Payment method',
    )
    payment_method_id: Optional[str] = Field(
        None,
        description='Unique identifier for the payment method.',
        examples=['123456'],
        title='Payment method id',
    )
    payment_method_reference: Optional[str] = Field(
        None,
        description='Optional reference message returned by payment method on processing',
        examples=['123456'],
        title='Payment method reference',
    )
    reconciled: Optional[bool] = Field(
        None,
        description='Payment has been reconciled',
        examples=[True],
        title='Reconciled',
    )
    reference: Optional[str] = Field(
        None,
        description='Optional payment reference message ie: Debit remittance detail.',
        examples=['123456'],
        title='Payment reference',
    )
    row_version: Optional[RowVersion] = None
    status: Optional[Status6] = Field(
        None,
        description='Status of payment',
        examples=['authorised'],
        title='Payment status',
    )
    supplier: Optional[LinkedSupplier] = None
    total_amount: float = Field(
        ..., description='Amount of payment', examples=[49.99], title='Total amount'
    )
    transaction_date: datetime = Field(
        ...,
        description='Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD',
        examples=['2021-05-01T12:00:00.000Z'],
        title='Transaction datetime',
    )
    type: Optional[Type12] = Field(
        None,
        description='Type of payment',
        examples=['accounts_receivable'],
        title='Payment Type',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class Supplier(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    account: Optional[LinkedLedgerAccount] = None
    addresses: Optional[List[Address]] = None
    bank_accounts: Optional[List[BankAccount]] = None
    company_name: Optional[CompanyName] = None
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    display_id: Optional[str] = Field(
        None, description='Display ID', examples=['EMP00101'], title='Display ID'
    )
    display_name: Optional[str] = Field(
        None,
        description='Display name',
        examples=['Windsurf Shop'],
        title='Display Name',
    )
    downstream_id: Optional[DownstreamId] = None
    emails: Optional[List[Email]] = None
    first_name: Optional[FirstName] = None
    id: Id
    individual: Optional[bool] = Field(
        None,
        description='Is this an individual or business supplier',
        examples=[True],
        title='Is individual',
    )
    last_name: Optional[LastName] = None
    middle_name: Optional[MiddleName] = None
    notes: Optional[str] = Field(
        None,
        description='Some notes about this supplier',
        examples=['Some notes about this supplier'],
        title='Notes',
    )
    phone_numbers: Optional[List[PhoneNumber]] = None
    row_version: Optional[RowVersion] = None
    status: Optional[Status7] = Field(
        None, description='Supplier status', examples=['active'], title='Status'
    )
    suffix: Optional[Suffix] = None
    tax_number: Optional[TaxNumber] = None
    tax_rate: Optional[LinkedTaxRate] = None
    title: Optional[Title] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    websites: Optional[List[Website]] = None


class TaxRate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[str] = Field(
        None,
        description='Tax code assigned to identify this tax rate.',
        examples=['ABN'],
        title='Tax code',
    )
    components: Optional[List[Component]] = Field(None, title='Tax components')
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    description: Optional[str] = Field(
        None,
        description='Description of tax rate',
        examples=['Reduced rate GST Purchases'],
        title='Description',
    )
    effective_tax_rate: Optional[float] = Field(
        None,
        description='Effective tax rate',
        examples=[10],
        title='Effective tax rate',
    )
    id: Optional[str] = Field(
        None, description='ID assigned to identify this tax rate.', examples=['1234']
    )
    name: Optional[constr(min_length=1)] = Field(
        None,
        description='Name assigned to identify this tax rate.',
        examples=['GST on Purchases'],
        title='Name',
    )
    original_tax_rate_id: Optional[str] = Field(
        None,
        description='ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.',
        examples=['12345'],
        title='Original tax rate ID',
    )
    report_tax_type: Optional[str] = Field(
        None,
        description='Report Tax type to aggregate tax collected or paid for reporting purposes',
        examples=['NONE'],
        title='Report Tax Type',
    )
    row_version: Optional[RowVersion] = None
    status: Optional[Status8] = Field(
        None,
        description='Tax rate status',
        examples=['active'],
        title='Tax rate status',
    )
    tax_payable_account_id: Optional[str] = Field(
        None,
        description='Unique identifier for the account for tax collected.',
        examples=['123456'],
        title='Tax payable account id',
    )
    tax_remitted_account_id: Optional[str] = Field(
        None,
        description='Unique identifier for the account for tax remitted.',
        examples=['123456'],
        title='Tax remitted account id',
    )
    total_tax_rate: Optional[float] = Field(
        None,
        description='Not compounded sum of the components of a tax rate',
        examples=[10],
        title='Total tax rate',
    )
    type: Optional[str] = Field(
        None,
        description='Tax type used to indicate the source of tax collected or paid',
        examples=['NONE'],
        title='Tax Type',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class AccountingCustomer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    account: Optional[LinkedLedgerAccount] = None
    addresses: Optional[List[Address]] = None
    bank_accounts: Optional[List[BankAccount]] = None
    company_name: Optional[CompanyName] = None
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    display_id: Optional[str] = Field(
        None, description='Display ID', examples=['EMP00101'], title='Display ID'
    )
    display_name: Optional[str] = Field(
        None,
        description='Display name',
        examples=['Windsurf Shop'],
        title='Display Name',
    )
    downstream_id: Optional[DownstreamId] = None
    emails: Optional[List[Email]] = None
    first_name: Optional[FirstName] = None
    id: Id
    individual: Optional[bool] = Field(
        None,
        description='Is this an individual or business customer',
        examples=[True],
        title='Is individual',
    )
    last_name: Optional[LastName] = None
    middle_name: Optional[MiddleName] = None
    notes: Optional[str] = Field(
        None,
        description='Some notes about this customer',
        examples=['Some notes about this customer'],
        title='Notes',
    )
    parent: Optional[LinkedParentCustomer] = None
    phone_numbers: Optional[List[PhoneNumber]] = None
    project: Optional[bool] = Field(
        None,
        description='If true, indicates this is a Project.',
        examples=[False],
        title='Is project',
    )
    row_version: Optional[RowVersion] = None
    status: Optional[Status] = Field(
        None, description='Customer status', examples=['active'], title='Status'
    )
    suffix: Optional[Suffix] = None
    tax_number: Optional[TaxNumber] = None
    tax_rate: Optional[LinkedTaxRate] = None
    title: Optional[Title] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    websites: Optional[List[Website]] = None


class Bill(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    balance: Optional[float] = Field(
        None, description='Balance of bill due.', examples=[27500], title='Balance'
    )
    bill_date: Optional[date] = Field(
        None,
        description='Date bill was issued - YYYY-MM-DD.',
        examples=['2020-09-30'],
        title='Bill date',
    )
    bill_number: Optional[str] = Field(None, examples=['10001'], title='Bill number')
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    currency_rate: Optional[CurrencyRate] = None
    deposit: Optional[float] = Field(
        None,
        description='Amount of deposit made to this bill.',
        examples=[0],
        title='Deposit',
    )
    downstream_id: Optional[DownstreamId] = None
    due_date: Optional[date] = Field(
        None,
        description='The due date is the date on which a payment is scheduled to be received by the supplier - YYYY-MM-DD.',
        examples=['2020-10-30'],
        title='Due date',
    )
    id: Optional[Id] = None
    ledger_account: Optional[LinkedLedgerAccount] = None
    line_items: Optional[List[BillLineItem]] = None
    notes: Optional[str] = Field(
        None, examples=['Some notes about this bill.'], title='Notes'
    )
    paid_date: Optional[date] = Field(
        None,
        description='The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.',
        examples=['2020-10-30'],
        title='Paid date',
    )
    po_number: Optional[str] = Field(
        None,
        description='A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.',
        examples=['90000117'],
        title='Purchase Order number',
    )
    reference: Optional[str] = Field(
        None,
        description='Optional bill reference.',
        examples=['123456'],
        title='Bill reference',
    )
    row_version: Optional[RowVersion] = None
    status: Optional[Status1] = Field(
        None, description='Invoice status', examples=['draft'], title='Status'
    )
    sub_total: Optional[float] = Field(
        None,
        description='Sub-total amount, normally before tax.',
        examples=[27500],
        title='Sub-total amount',
    )
    supplier: Optional[LinkedSupplier] = None
    tax_code: Optional[str] = Field(
        None,
        description='Applicable tax id/code override if tax is not supplied on a line item basis.',
        examples=['1234'],
        title='Tax Code',
    )
    tax_inclusive: Optional[TaxInclusive] = None
    terms: Optional[str] = Field(
        None, description='Terms of payment.', examples=['Net 30 days'], title='Terms'
    )
    total: Optional[float] = Field(
        None,
        description='Total amount of bill, including tax.',
        examples=[27500],
        title='Total amount',
    )
    total_tax: Optional[float] = Field(
        None,
        description='Total tax amount applied to this bill.',
        examples=[2500],
        title='Total tax amount',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class CreditNote(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    account: Optional[LinkedLedgerAccount] = None
    allocations: Optional[List[Allocation]] = None
    balance: Optional[float] = Field(
        None,
        description='The balance reflecting any payments made against the transaction.',
        examples=[27500],
        title='Balance',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    currency_rate: Optional[CurrencyRate] = None
    customer: Optional[LinkedCustomer] = None
    date_issued: Optional[datetime] = Field(
        None,
        description='Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD',
        examples=['2021-05-01T12:00:00.000Z'],
        title='Datetime',
    )
    date_paid: Optional[datetime] = Field(
        None,
        description='Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD',
        examples=['2021-05-01T12:00:00.000Z'],
        title='Datetime',
    )
    id: str = Field(
        ...,
        description='Unique identifier representing the entity',
        examples=['123456'],
        title='Credit Note identifier',
    )
    line_items: Optional[List[InvoiceLineItem]] = None
    note: Optional[str] = Field(
        None,
        description='Optional note to be associated with the credit note.',
        examples=['Some notes about this credit note'],
        title='Note',
    )
    number: Optional[str] = Field(
        None,
        description='Credit note number.',
        examples=['OIT00546'],
        title='Credit note number',
    )
    reference: Optional[str] = Field(
        None,
        description='Optional reference message ie: Debit remittance detail.',
        examples=['123456'],
        title='Credit Note reference',
    )
    remaining_credit: Optional[float] = Field(
        None,
        description='Indicates the total credit amount still available to apply towards the payment.',
        examples=[27500],
        title='Remaining Credit',
    )
    row_version: Optional[RowVersion] = None
    status: Optional[Status3] = Field(
        None,
        description='Status of credit notes',
        examples=['authorised'],
        title='Credit Note status',
    )
    sub_total: Optional[float] = Field(
        None,
        description='Sub-total amount, normally before tax.',
        examples=[27500],
        title='Sub-total amount',
    )
    tax_code: Optional[str] = Field(
        None,
        description='Applicable tax id/code override if tax is not supplied on a line item basis.',
        examples=['1234'],
        title='Tax Code',
    )
    tax_inclusive: Optional[TaxInclusive] = None
    terms: Optional[str] = Field(
        None,
        description='Optional terms to be associated with the credit note.',
        examples=['Some terms about this credit note'],
        title='Terms',
    )
    total_amount: float = Field(
        ..., description='Amount of transaction', examples=[49.99], title='Total amount'
    )
    total_tax: Optional[float] = Field(
        None,
        description='Total tax amount applied to this invoice.',
        examples=[2500],
        title='Total tax amount',
    )
    type: Optional[Type4] = Field(
        None,
        description='Type of payment',
        examples=['accounts_receivable_credit'],
        title='Credit Note Type',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class DeleteInvoiceItemResponse(RootModel[DeleteTaxRateResponse]):
    root: DeleteTaxRateResponse


class GetBillResponse(BaseModel):
    data: Bill
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['bills']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetBillsResponse(BaseModel):
    data: List[Bill]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['bills']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCreditNoteResponse(BaseModel):
    data: CreditNote
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['credit-notes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCreditNotesResponse(BaseModel):
    data: List[CreditNote]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['credit-notes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCustomerResponse(BaseModel):
    data: AccountingCustomer
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['customers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCustomersResponse(BaseModel):
    data: List[AccountingCustomer]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['customers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetInvoiceItemResponse(BaseModel):
    data: InvoiceItem
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoice-items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetInvoiceItemsResponse(BaseModel):
    data: List[InvoiceItem]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoice-items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetLedgerAccountResponse(BaseModel):
    data: LedgerAccount
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ledger-accounts']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetLedgerAccountsResponse(BaseModel):
    data: List[LedgerAccount]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ledger-accounts']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetPaymentResponse(BaseModel):
    data: Payment
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['payments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetPaymentsResponse(BaseModel):
    data: List[Payment]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['payments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetSupplierResponse(BaseModel):
    data: Supplier
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['suppliers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetSuppliersResponse(BaseModel):
    data: List[Supplier]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['suppliers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetTaxRateResponse(BaseModel):
    data: TaxRate
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['tax-rates']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetTaxRatesResponse(BaseModel):
    data: List[TaxRate]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['tax-rates']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Invoice(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    balance: Optional[float] = Field(
        None, description='Balance of invoice due.', examples=[27500], title='Balance'
    )
    billing_address: Optional[Address] = None
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    currency_rate: Optional[CurrencyRate] = None
    customer: Optional[LinkedCustomer] = None
    customer_memo: Optional[str] = Field(
        None,
        description='Customer memo',
        examples=['Thank you for your business and have a great day!'],
        title='Customer memo',
    )
    deposit: Optional[float] = Field(
        None,
        description='Amount of deposit made to this invoice.',
        examples=[0],
        title='Deposit',
    )
    discount_amount: Optional[float] = Field(
        None,
        description='Discount amount applied to this invoice.',
        examples=[25],
        title='Discount Amount',
    )
    discount_percentage: Optional[float] = Field(
        None,
        description='Discount percentage applied to this invoice.',
        examples=[5.5],
        title='Discount Percent',
    )
    downstream_id: Optional[DownstreamId] = None
    due_date: Optional[date] = Field(
        None,
        description='The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.',
        examples=['2020-09-30'],
        title='Due date',
    )
    id: Optional[Id] = None
    invoice_date: Optional[date] = Field(
        None,
        description='Date invoice was issued - YYYY-MM-DD.',
        examples=['2020-09-30'],
        title='Invoice date',
    )
    invoice_sent: Optional[bool] = Field(
        None,
        description='Invoice sent to contact/customer.',
        examples=[True],
        title='Invoice Sent',
    )
    line_items: Optional[List[InvoiceLineItem]] = None
    number: Optional[str] = Field(
        None,
        description='Invoice number.',
        examples=['OIT00546'],
        title='Invoice number',
    )
    po_number: Optional[str] = Field(
        None,
        description='A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.',
        examples=['90000117'],
        title='Purchase Order number',
    )
    reference: Optional[str] = Field(
        None,
        description='Optional invoice reference.',
        examples=['123456'],
        title='Invoice reference',
    )
    row_version: Optional[RowVersion] = None
    shipping_address: Optional[Address] = None
    source_document_url: Optional[str] = Field(
        None,
        description="URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.",
        examples=['https://www.invoicesolution.com/invoice/123456'],
        title='Source document URL',
    )
    status: Optional[Status4] = Field(
        None, description='Invoice status', examples=['draft'], title='Status'
    )
    sub_total: Optional[float] = Field(
        None,
        description='Sub-total amount, normally before tax.',
        examples=[27500],
        title='Sub-total amount',
    )
    tax_code: Optional[str] = Field(
        None,
        description='Applicable tax id/code override if tax is not supplied on a line item basis.',
        examples=['1234'],
        title='Tax Code',
    )
    tax_inclusive: Optional[TaxInclusive] = None
    template_id: Optional[str] = Field(
        None,
        description='Optional invoice template',
        examples=['123456'],
        title='Template',
    )
    terms: Optional[str] = Field(
        None, description='Terms of payment.', examples=['Net 30 days'], title='Terms'
    )
    total: Optional[float] = Field(
        None,
        description='Total amount of invoice, including tax.',
        examples=[27500],
        title='Total amount',
    )
    total_tax: Optional[float] = Field(
        None,
        description='Total tax amount applied to this invoice.',
        examples=[2500],
        title='Total tax amount',
    )
    type: Optional[Type6] = Field(
        None, description='Invoice type', examples=['service'], title='Invoice type'
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class JournalEntry(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    currency_rate: Optional[CurrencyRate] = None
    id: Optional[Id] = None
    journal_symbol: Optional[str] = Field(
        None,
        description='Journal symbol of the entry. For example IND for indirect costs',
        examples=['IND'],
        title='Journal symbol',
    )
    line_items: Optional[List[JournalEntryLineItem]] = Field(
        None,
        description='Requires a minimum of 2 line items that sum to 0',
        min_length=2,
    )
    memo: Optional[str] = Field(
        None,
        description='Reference for the journal entry.',
        examples=['Thank you for your business and have a great day!'],
        title='Memo',
    )
    posted_at: Optional[datetime] = Field(
        None,
        description='This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Posted at (timestamp)',
    )
    row_version: Optional[RowVersion] = None
    title: Optional[str] = Field(
        None,
        description='Journal entry title',
        examples=['Purchase Invoice-Inventory (USD): 2019/02/01 Batch Summary Entry'],
        title='Journal entry title',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class GetInvoiceResponse(BaseModel):
    data: Invoice
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoices']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetInvoicesResponse(BaseModel):
    data: List[Invoice]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['invoices']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['xero']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetJournalEntriesResponse(BaseModel):
    data: List[JournalEntry]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['journal-entries']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['quickbooks']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetJournalEntryResponse(BaseModel):
    data: JournalEntry
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['journal-entries']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['quickbooks']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetProfitAndLossResponse(BaseModel):
    data: ProfitAndLoss
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ProfitAndLosses']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['quickbooks']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Expenses(BaseModel):
    records: ProfitAndLossRecords
    total: float = Field(
        ..., description='Total expense', examples=[100000], title='Total expense'
    )


class GrossProfit(BaseModel):
    records: ProfitAndLossRecords
    total: float = Field(
        ...,
        description='Total gross profit',
        examples=[100000],
        title='Total gross profit',
    )


class Income(BaseModel):
    records: ProfitAndLossRecords
    total: float = Field(
        ..., description='Total income', examples=[100000], title='Total income'
    )


class NetIncome(BaseModel):
    records: ProfitAndLossRecords
    total: float = Field(
        ..., description='Total net income', examples=[100000], title='Total net income'
    )


class NetOperatingIncome(BaseModel):
    records: ProfitAndLossRecords
    total: float = Field(
        ...,
        description='Total net operating income',
        examples=[100000],
        title='Total net operating income',
    )


class ProfitAndLoss(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    currency: str = Field(..., examples=['USD'], title='Currency')
    customer_id: Optional[str] = Field(
        None, description='Customer id', examples=['123'], title='Customer Id'
    )
    end_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None,
        description='The start date of the report',
        examples=['2017-01-01'],
        title='Start Date',
    )
    expenses: Expenses = Field(
        ...,
        examples=[
            {
                'records': [
                    {'amount': 10000, 'id': '123', 'name': 'Expense 1'},
                    {'amount': 20000, 'id': '456', 'name': 'Expense 2'},
                ],
                'total': 200000,
            }
        ],
    )
    gross_profit: Optional[GrossProfit] = Field(None, examples=[{'total': 200000}])
    id: Optional[Id] = None
    income: Income = Field(
        ...,
        examples=[
            {
                'records': [
                    {'amount': 10000, 'id': '123', 'name': 'Income 1'},
                    {'amount': 20000, 'id': '456', 'name': 'Income 2'},
                ],
                'total': 200000,
            }
        ],
    )
    net_income: Optional[NetIncome] = Field(None, examples=[{'total': 200000}])
    net_operating_income: Optional[NetOperatingIncome] = Field(
        None, examples=[{'total': 200000}]
    )
    report_name: str = Field(
        ...,
        description='The name of the report',
        examples=['ProfitAndLoss'],
        title='Report Name',
    )
    start_date: Optional[constr(pattern=r'^\d{4}-\d{2}-\d{2}$')] = Field(
        None,
        description='The start date of the report',
        examples=['2017-01-01'],
        title='Start Date',
    )


class ProfitAndLossRecords(
    RootModel[Optional[List[Union[ProfitAndLossSection, ProfitAndLossRecord]]]]
):
    root: Optional[List[Union[ProfitAndLossSection, ProfitAndLossRecord]]] = None


class ProfitAndLossSection(BaseModel):
    id: Optional[str] = Field(None, examples=['123abc'])
    records: Optional[ProfitAndLossRecords] = None
    title: Optional[str] = Field(None, examples=['Income'])
    total: Optional[float] = Field(None, examples=[23992.34])
    type: str = Field(..., examples=['Section'])


GetProfitAndLossResponse.model_rebuild()
Expenses.model_rebuild()
GrossProfit.model_rebuild()
Income.model_rebuild()
NetIncome.model_rebuild()
NetOperatingIncome.model_rebuild()
ProfitAndLossRecords.model_rebuild()
